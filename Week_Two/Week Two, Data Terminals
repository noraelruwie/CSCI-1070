{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1d664acc-2e7a-4385-bcff-7548e55e110b",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = 5 # integer\n",
    "y = 5.0 #/float/floating point"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e014f3ed-6638-44b0-ba07-84f2a12918aa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n"
     ]
    }
   ],
   "source": [
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c8ea46a2-7521-46c1-8bda-8d2662e622f3",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "'int' object is not callable",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[3], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[43mx\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mtype\u001b[39;49m\u001b[43m)\u001b[49m)\n",
      "\u001b[0;31mTypeError\u001b[0m: 'int' object is not callable"
     ]
    }
   ],
   "source": [
    "print(x(type))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d369d7f8-b348-4626-96d3-f63d72784ce5",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "'int' object is not subscriptable",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[4], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[43mx\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;28;43mtype\u001b[39;49m\u001b[43m]\u001b[49m)\n",
      "\u001b[0;31mTypeError\u001b[0m: 'int' object is not subscriptable"
     ]
    }
   ],
   "source": [
    "print(x[type])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d2dcb09d-7c31-48bc-8672-cb1c01c065a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "#slicing slice(start, end, step)\n",
    "letters_tuple = (\"a\", \"b\", \"c\", \"d\", \"e\",)\n",
    "x = slice(1,2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "09fb52cb-64ea-466b-9eb4-909a6edb4114",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('a', 'b')\n"
     ]
    }
   ],
   "source": [
    "#slicing slice(start, end, step)\n",
    "letters_tuple = (\"a\", \"b\", \"c\", \"d\", \"e\",) \n",
    "x = slice(2)\n",
    "print(letters_tuple[x])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c47daccd-3ae3-4bd9-bf91-9ef7ba2487d4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('a', 'b')"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "letters_tuple[0:2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "28aff0c5-9adf-41b7-bcf4-d363123883a9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('a', 'b', 'c', 'd')\n"
     ]
    }
   ],
   "source": [
    "# use slice to return a, c, and e\n",
    "y = slice(0,4,1)\n",
    "print(letters_tuple[y])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "69071535-f45b-4c0e-ae9c-868b5bab9b08",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('a', 'c', 'e')\n"
     ]
    }
   ],
   "source": [
    "#use slice to return a, c, and e\n",
    "# the end value is \"exclusive\" which means 0-5 does not include the 5 itself. \n",
    "# slice (inclusive start, exclusive end, step) \n",
    "y = slice(0,5,2)\n",
    "print(letters_tuple[y])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7bddeaec-fda7-4187-b7ad-19e9494d7fe0",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
